name: Deploy to Kubernetes using GitHub Actions

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-22.04
    name: Build and deploy Quizlet app
    steps:
    - uses: actions/checkout@v3

    # Setup KinD cluster
    - name: Setup Kind
      uses: helm/kind-action@v1.8.0
      with:
        version: v0.22.0
        cluster_name: quizlet-cluster

    # Build and load backend image into cluster
    - name: Build backend image
      run: |
        docker build -f ./backend/Dockerfile -t quizlet-backend:latest ./backend
        kind load docker-image quizlet-backend:latest --name quizlet-cluster

    # Build and load frontend image into cluster
    - name: Build frontend image
      run: |
        docker build -f ./frontend/Dockerfile -t quizlet-frontend:latest ./frontend
        kind load docker-image quizlet-frontend:latest --name quizlet-cluster

    - name: Verify images
      run: docker images | grep quizlet

    # Deploy PostgreSQL
    - name: Deploy PostgreSQL
      run: kubectl apply -f k8s/postgres-deployment.yaml

    - name: Wait for PostgreSQL
      run: |
        kubectl wait --for=condition=ready pod -l app=quizlet-postgres --timeout=120s

    - name: Initialize database
      run: |
        sleep 20
        if [ -f "./backend/init_db.sql" ]; then
          echo "Initializing database with init script..."
          kubectl cp ./backend/init_db.sql quizlet-postgres-$(kubectl get pods -l app=quizlet-postgres -o jsonpath='{.items[0].metadata.name}'):/tmp/init_db.sql
          kubectl exec deployment/quizlet-postgres -- psql -U quizuser -d quizdb -f /tmp/init_db.sql
        else
          echo "No init_db.sql found, skipping database initialization"
        fi

    # Deploy backend & frontend
    - name: Deploy backend
      run: kubectl apply -f k8s/backend-deployment.yaml

    - name: Debug backend pod in detail
      run: |
            echo "=== Waiting for pod to be created ==="
            sleep 10
            echo "=== Pod details ==="
            kubectl get pods -l app=quizlet-backend -o wide
            echo "=== Pod events ==="
            kubectl get events --field-selector involvedObject.kind=Pod --sort-by='.lastTimestamp' | grep backend
            echo "=== Pod describe ==="
            POD_NAME=$(kubectl get pods -l app=quizlet-backend -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD_NAME" ]; then
            kubectl describe pod $POD_NAME
            else
            echo "No backend pod found yet"
            fi
        
    - name: Deploy frontend
      run: kubectl apply -f k8s/frontend-deployment.yaml

    - name: Check backend status
      run: |
        kubectl describe deployment/quizlet-backend
        kubectl get pods -l app=quizlet-backend
        kubectl logs -l app=quizlet-backend --tail=50

    - name: Wait for deployments
      run: |
        kubectl wait --for=condition=available deployment/quizlet-backend --timeout=60s
        kubectl wait --for=condition=available deployment/quizlet-frontend --timeout=60s

    # Install ingress controller for KinD
    - name: Install Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=180s

    # Create ingress resource
    - name: Create ingress for frontend access
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: quizlet-frontend
        spec:
          rules:
          - http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: quizlet-frontend
                    port:
                      number: 80
        EOF

    - name: Show status
      run: |
        kubectl get all
        kubectl get ingress
